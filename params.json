{"name":"GitGui","tagline":"A Gui based, github applicaiton","body":"# GitGui\r\n\r\n#Introduciton:\r\nA python GUI based application/package, that lets you push a file to your github\r\neasily, without any difficulties.\r\nIf you are too lazy to add and commit through command prompt, then this app/package is for you.\r\n\r\nFUN FACT - All the files in this repo is pushed using this app/package only :)\r\n\r\n#Installation:\r\n\r\nYou really dont need to install it, you can just download the git_gui.py and __init__.py source code, get them in a directory and you are good to go. This way, you can change the program as you like it\r\n\r\nBut if you really want to install then go through the following:\r\n\r\n1.Install it on the go with pip install.\r\n\r\n   NOTE : FOR THE NOOB I AM, REMEMBER TO USE A VIRTUALENV WHILE INSTALLING THE CODE :)\r\n\r\n         sudo pip install GitGui\r\n   and that does the trick for you.\r\n\r\n   But before using pip to install this package, little bit of tweaking is needed. You have to configure your pip.conf    file. You should find your pip.conf file here: /home/.pip/pip.conf, however if it is not present, dont panic just\r\n   make a file namely pip.conf and put the codes within as showed. Let me show from begining.\r\n          \r\n          /$ cd .pip\r\n          /.pip$ vim pip.conf\r\n            \r\n   Then write the following within pip.conf\r\n         \r\n          [global]\r\n          index-url = https://testpypi.python.org/pypi/\r\n\r\n   This points, the pip to look for the package in test server as this package is being hosted on the test-server         testpypi and not the actual server, where all the core packages are present. Hope this helps :) \r\n  \r\n\r\n2. If python-setuptools is pre-installed, you can also use easy_install command\r\n\r\n            easy_install GitGui\r\n\r\n\r\n\r\n#How to use:\r\n1. Just import the package GitGui\r\n2. And invoke the function gitall().\r\n         \r\n         import gutgui\r\n         gitgui.gitall()\r\n\r\n3. Save the program as *.py and execute.\r\n\r\n\r\n#Utilities:\r\n1. Being a GUI based application, now its easier to push files to your Github repos. Consider this for a moment, through standard process, in order to push a file to your github repo, you need to first initialize git in your current directory, then add a file, then commit it with some message, then you need to configure remote and then you can push it to your remote, thats not all then you have to enter username and password. A long tiring process indeed, therefore a GUI based app that reduces your effort.\r\n         Just add your file, using filebrowser, enter your commit message and repo and you are done.\r\n2. No need for username and password authentication, as github auth token does this job in background for you.\r\n3. If you have by-mistaken entered the incorrect repo name, i.e. if repo is not present, the app lists all the repos you have and lets you try again.\r\n4. Also if you try to push a file, that is already there in your repo, it will print an error message and aborts the program\r\n4. Make the program *.py executable using chmod, make a shortcut of this program to your desktop(so that you dont forget to push) and start pushing all the codes, that you have written and not pushed. \r\n\r\n\r\n#Clone\r\nFeel free to clone and play arond the code to make it better\r\n    \r\n      git clone https://github.com/Rahul91/GitGui\r\n      \r\n#Issues:\r\n1. The code is very 'brute' in nature and design, help it to be more pythonic and asthetic.\r\n2. Only one file can be pushed at a time, which should not be the case ideally.\r\n3. Find a issue and mail me: priyrahulmishra@gmail.com\r\n\r\n        \r\n\r\n\r\n\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}